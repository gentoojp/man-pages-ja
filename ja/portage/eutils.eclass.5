.\"
.\" Japanese Version Copyright (c) 2003-2004 Mamoru KOMACHI
.\"     all rights reserved
.\" Translated on 19 Aug 2003 by Mamoru KOMACHI <usata@gentoo.org>
.\"
.TH "EUTILS.ECLASS" "5" "Jun 2003" "Portage 2.0.51" "Portage"
.SH "名前"
eutils \- ebuild で使われる追加の(でもよく使われる)いろいろな関数
.SH "説明"
\fBeutils\fR eclass は ebuild.sh にすでに含まれている関数を補助する
関数セットを持っている。考え方としては、全 ebuild
に必須というわけではないが、共通の置き場所を定めるには十分、
というような関数セットを集めている。
.SH "関数"
.TP
.BR "cdrom_get_cds " "\fI<cd1 file>\fR \fI[cd2 file]\fR \fI[cd n file]\fR"
CDからファイルを読み取る必要があるebuild作成に便利な関数である。
gameのパッケージでもっともよく使われる。
CDごとにCDがマウントされているかどうか検出するために使うファイルのリストを指定するだけである。
この関数はユーザーとの対話的なごちゃごちゃとしたことを全部受け持ってくれる。
この関数が終了すれば、\fICDROM_ROOT\fR変数にアクセスすることができる。
もしなにがしかの方法でCDの名前をユーザーに伝えたければ、この関数を呼ぶ前に\fICDROM_NAME\fR変数をexportしておけばよい。
1つ以上のCDの名前をそれぞれ違う名前で出したければ、\fICDROM_NAME_1\fR、\fICDROM_NAME_2\fR、といったようにexportすればよい。
複数CDのサポートについての詳しい情報は、\fBcdrom_load_next_cd\fRを参照。
.TP
.BR "cdrom_load_next_cd"
大き過ぎるため複数のCDで配布されているパッケージもある。
1つのCDからファイルを読み終え、次のCDにアクセスしたいときには、この関数を呼べばよい。
ここでも、ユーザーとの対話的なごちゃごちゃしたやりとりはこの関数が代わりにやってくれる。
この関数が終了したら、マウントされたCDの場所は\fICDROM_ROOT\fRを読めばよい。
CDリストを次々に読んでいくことしかできないので、現在のCDについての処理が全部終わってからこの関数を呼ぶよう留意すること。
.TP
.BR "draw_line"
$* と同じ長さの「=」からなる線を引く単純な関数。
`draw_line 1234 5678` を実行すれば、1行に9文字の「=」が得られる。
.TP
.BR "edos2unix " "\fI<ファイル>\fR"
dos2unix、recode、fixdos などなどを手軽に置き換える。
この関数はスクリプトベースのものなので、これを使えば DEPEND
変数からこれらのテキストユーティリティを全部取り除くことができる。
変換するファイル名を与えるだけで、
DOS の CRLF 形式から UNIX の LF 形式に変換することができる。
.TP
.BR "enewgroup " "\fI<グループ名>\fR \fI[gid]\fR"
この関数を使えば、
グループをシステムに追加する正しい方法を知らなくてもよくなる。
追加する \fIグループ名\fR を与えれば、\fBenewgroup\fR 
が残りをやってくれる。そのグループに \fIgid\fR
を指定することもできるし、次に使用できる \fIgid\fR
を自動で確保して割り当てることもできる。
.TP
.BR "enewuser " "\fI<ユーザ名>\fR \fI[uid]\fR \fI[シェル]\fR \fI[ホームディレクトリ]\fR \fI[グループ名]\fR \fI[パラメータ]\fR"
\fBenewgroup\fR と同じで、
ユーザをシステムに追加する正しい方法を知らなくてよくなる。
必須のパラメータは \fIユーザ名\fR だけである。
.br
.BR "デフォルト値"
.br
\fIuid\fR: 次に使用できる値
(デフォルトのふるまいをさせたければ -1 を渡す)
.br
\fIシェル\fR: /bin/false
.br
\fIホームディレクトリ\fR: /dev/null
.br
\fIグループ名\fR: グループなし
.br
\fIパラメータ\fR: \fBuseradd\fR(8) が受け取れるその他のパラメータ全部。
詳しくは man ページ参照
.TP
.BR "epatch"
下記 \fBepatch\fR セクション参照。
.TP
.BR "gen_usr_ldscript"
/lib にあるダイナミックライブラリのためのリンカースクリプトを
/usr/lib に生成する。 これは /lib に .so、そして /usr/lib に .a
があるときのリンク問題を解決するためのものである。
ときどき、gcc や libtool のライブラリ検索パスを変更していると、
ダイナミックリンクのとき /lib にある .so ではなく
/usr/lib にある .a が使われる、ということが起きるのである。
.TP
.BR "get_number_of_jobs"
システムに存在する CPU の数を調べ、得られた結果それに従って
MAKEOPTS に -j を設定する。
.TP
.BR "have_NPTL"
この関数は glibc の NPTL pthread の実装を使っていると真を返す。
.TP
.BR "make_desktop_entry " "\fI<バイナリ>\fR \fI[名前]\fR \fI[アイコン]\fR \fI[種類]\fR \fI[パス]\fR"
GNOME や KDE のメニューにアプリケーションへの小さなショートカットを作る。
実行するバイナリの名前を渡すだけで、残りは全部やってくれる。
メニューに表れる名前を変えたければ、この関数に \fI名前\fR 
のパラメータを渡す。\fIアイコン\fR (デフォルトは \fB${PN}\fR.png)
を指定したければ、/usr/share/pixmaps/ からの相対パス、
もしくはファイルへの絶対パスで画像ファイルの名前を渡す。
アイコンがインストールされるメニューのセクションを
(\fB${CATEGORY}\fR で決定されるデフォルトの場所ではなく)
指定したければ、\fI種類\fR の値を指定する
(取りうる値については
http://www.freedesktop.org/standards/menu-spec/
参照)。最後に、
アプリケーションが特別なディレクトリで起動しなければならないなら、
最後の値をフル \fIパス\fR 名として渡す。
.TP
.BR "unpack_makeself "\fI[makeself archive]\fR \fI[byte offset]\fR"
makeself自身の展開スクリプトに頼らずmakeselfアーカイブを展開する。
makeselfスクリプトがもう適切にサポートされていない古い構文(POSIX)を使っている場合に便利である。
展開するファイルを指定しなければ、\fB${A}\fRが代わりに使われる。
オフセットを指定しなければ、makeselfスクリプトを検索して正しい値を見つける。
makeselfアーカイブについての詳しい情報は、http://www.megastep.org/makeself/を参照のこと。
.TP
.BR "unpack_pdv " "\fI<pdv archive>\fR \fI<sizeof(off_t)>\fR"
pdv自身の展開バイナリに頼らずpdvアーカイブを展開する。
スタティックバイナリがときどきクラッシュするシステムや、バイナリが非対話的な展開方法を提供していない場合に便利である。
off_tサイズを指定しなければならないのは、わたし(vapier@gentoo.org)がバイナリ実行ファイルから自動的にオフセット情報を抽出する方法を知らないからだ。
渡す値はpdvアーカイブを作成した計算機でのoff_tタイプのサイズ(バイト)である。
その値が分からないのであれば、2、4、もしくは8を試してみるとよい。
pdvアーカイブについての詳しい情報は、http://pdv.sourceforge.net/を参照のこと。
.SH "EPATCH"
.TP
.B "epatch について"
\fBepatch\fR はパッチを簡単にするために設計された。
開発者が \fBpatch\fR(1) コマンドを使ったときにもするであろう、
一般的なチェックを全部やってくれる。
この関数は、いろいろなオフセット値 (-p0 から -p5 まで、\fBepatch\fR 
が呼ばれたときの作業ディレクトリに相対的に)でパッチを当てようと試みる。
パッチを当てるのに(--dry-run でテストすることによって)失敗すれば、
\fBepatch\fR は \fBdie\fR を呼ぶことによって emerge
プロセスを停止させる。
デバッグが簡単なように、パッチを試行した出力がログファイルとして残る。
パッチが成功すれば、
どのパッチが当たったのかを示すきれいに整形されたメッセージが出力される。
\fBepatch\fR は山のようなパッチを当てるのにも、
ほんの1つや2つのパッチを当てるのにも使うことができる。
それに加え、この関数は bzip2、gzip、compress (Z) そして zip
形式で圧縮されたパッチファイルを扱うこともできる。
.TP
.B "使用方法"
.RS
.TP
.B "epatch " "\fI<パッチファイル>\fR"
\fBepatch\fR を使うもっとも簡単で一般的な方法は、
単にパッチファイルへのフルパスを与えるだけである。
.TP
.B "epatch " "\fI<ディレクトリ>\fR"
さらに強力な使い方は、ディレクトリにパッチをたくさん入れ、
そして \fBepatch\fR にそのディレクトリにあるパッチ全部を当てさせる、
というものである。パッチは ??_${\fBARCH\fR}_foo.${\fBEPATCH_SUFFIX\fR}
という形式でなければならない。
こうするときちんとパッチが順序づけられていることが保証され、
\fBARCH\fR 固有のパッチを当てることもできる。

.br
01_all_misc-fix.patch.bz2
.br
   全アーキテクチャ向けに最初人 misc-fix のパッチを当てる
.br
02_sparc_another-fix.patch.bz2
.br
   SPARC のときだけ another-fix パッチを2番目に当てる
.RE
.TP
.B 変数
.RS
.TP
.B "EPATCH_SOURCE" = \fI"${WORKDIR}/patch"\fR
\fBepatch\fR が当てるパッチやパッチのディレクトリの名前。
この変数は \fBepatch\fR をパラメータつきで呼べば自動で設定される。
.TP
.B "EPATCH_SUFFIX" = \fI"patch.bz2"\fR
たくさんのパッチを当てるとき、
この値が全てのパッチの持つ suffix になる。
.TP
.B "EPATCH_OPTS" = \fI""\fR
\fBpatch\fR(1) に渡す追加オプション。
我々も全てお見通しという訳ではないので、制限する理由もない :)
デフォルトはもちろん "" である。
.TP
.B "EPATCH_EXCLUDE" = \fI""\fR
スペースで区切られた (いや、本当のところは \fBIFS\fR で区切られた……)
ファイル名のリストで、
たくさんのパッチを当てるとき飛ばすパッチのファイル名を列挙する。
ファイル名だけ書き、フルパスは使わないこと。
.TP
.B "EPATCH_SINGLE_MSG" = \fI"Applying <パッチ名>"\fR
たった1つのパッチをあてるのだとすれば、
デフォルトのメッセージを表示するのではなく、
なんでも言いたいことを言うよう変更できる。
もしやりたければ、もちろん「わたしを無線装置 51 と呼ばないで」
と表示させることだってできる。
.TP
.B "EPATCH_FORCE" = \fI"[yes|no]"\fR
この変数では \fBEPATCH_SOURCE\fR にあるパッチが
??_${\fBARCH\fR}_foo.${\fBEPATCH_SUFFIX\fR}
というファイル名のルールに則っていなくても全て当てるかどうか決める。
デフォルトでは上記のルールを使ってもらいたい。
.RE
.SH "バグ報告"
バグ報告は http://bugs.gentoo.org/ 経由で行なってください。
.SH "参照"
.BR ebuild (5)
.SH "ファイル"
.BR /usr/portage/eclass/eutils.eclass
.SH "著者"
Mike Frysinger <vapier@gentoo.org>
.SH "CVS ヘッダ"
原文: eutils.eclass.5,v 1.5
